{
	"info": {
		"_postman_id": "4d3228d1-4ad0-4e88-a0de-26c1b6cd245f",
		"name": "Challenge Tyba",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Authentication",
			"item": [
				{
					"name": "Register",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"a.manrique\",\r\n    \"password\":\"SuperSafePassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{url}}:{{port}}/user/register",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\",\"bearer \"+data.token)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Variable validation\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.token).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"a.manrique\",\r\n    \"password\":\"SuperSafePassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{url}}:{{port}}/user/login",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Log out",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {\r",
									"    pm.response.to.have.status(204);\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{url}}:{{port}}/user/logout",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"logout"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Restaurants",
			"item": [
				{
					"name": "Login Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"var data = JSON.parse(responseBody);\r",
									"postman.setEnvironmentVariable(\"token\",\"bearer \"+data.token)\r",
									"\r",
									"\r",
									"\r",
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Variable validation\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"object\");\r",
									"  pm.expect(jsonData.token).to.be.a(\"string\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"username\":\"a.manrique\",\r\n    \"password\":\"SuperSafePassword\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{url}}:{{port}}/user/login",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"user",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Restaurants City Full",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Variable validation\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"Array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\":\"pizza\",\r\n    \"cityInfo\":{\r\n        \"neighborhood\":\"chelsea\",\r\n        \"borough\":\"manhattan\",\r\n        \"city\":\"New York City\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{url}}:{{port}}/restaurant",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"restaurant"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Restaurants City",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Variable validation\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"Array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"cityInfo\":{\r\n        \"city\":\"New York City\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{url}}:{{port}}/restaurant",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"restaurant"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Restaurants Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Variable validation\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"Array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"category\":\"pizza\",\r\n    \"location\":{\r\n        \"latitude\":\"26.020024\",\r\n        \"longitude\":\"-80.116178\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{url}}:{{port}}/restaurant",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"restaurant"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Restaurants Only Location",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"const jsonData = pm.response.json();\r",
									"pm.test(\"Variable validation\", () => {\r",
									"  pm.expect(jsonData).to.be.an(\"Array\");\r",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"location\":{\r\n        \"latitude\":\"26.020024\",\r\n        \"longitude\":\"-80.116178\"\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "http://{{url}}:{{port}}/restaurant",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"restaurant"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Transactions",
			"item": [
				{
					"name": "Get All",
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "http://{{url}}:{{port}}/transactions",
							"protocol": "http",
							"host": [
								"{{url}}"
							],
							"port": "{{port}}",
							"path": [
								"transactions"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Errors",
			"item": [
				{
					"name": "Authentication",
					"item": [
						{
							"name": "Login Copy",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\",\"bearer \"+data.token)\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Variable validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.token).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"a.manrique\",\r\n    \"password\":\"SuperSafePassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/user/login",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Wrong",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"Incorrect username or password\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"a.manrique\",\r\n    \"password\":\"UnSafePassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/user/login",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Login Incomplete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"Authentication failed! Please check the sent fields\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"a.manrique\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/user/login",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Incomplete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"Authentication failed! Please check the sent fields\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"a.manrique\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/user/register",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Register Used Username",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"Sign Up failed! The user is already registered\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"a.manrique\",\r\n    \"password\":\"SuperSafePassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/user/register",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out No Token",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"url": {
									"raw": "http://{{url}}:{{port}}/user/logout",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": []
						},
						{
							"name": "Log out Already out",
							"request": {
								"method": "DELETE",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"url": {
									"raw": "http://{{url}}:{{port}}/user/logout",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"logout"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Restaurants",
					"item": [
						{
							"name": "Login Copy 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var data = JSON.parse(responseBody);\r",
											"postman.setEnvironmentVariable(\"token\",\"bearer \"+data.token)\r",
											"\r",
											"\r",
											"\r",
											"pm.test(\"Status code is 200\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Variable validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.token).to.be.a(\"string\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"username\":\"a.manrique\",\r\n    \"password\":\"SuperSafePassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/user/login",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restaurants No City Token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", function () {\r",
											"    pm.response.to.have.status(403);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"Auth token is not supplied\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "",
										"value": "",
										"type": "text",
										"disabled": true
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category\":\"pizza\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/restaurant",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"restaurant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restaurants No City Info/Location",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"The input doesn't have a city or a location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category\":\"pizza\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/restaurant",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"restaurant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restaurants City Info Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"You must provide at least one field of the city info\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"cityInfo\":{}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/restaurant",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"restaurant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restaurants Location Incomplete",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"You must provide the latitude and longitude for the location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category\":\"pizza\",\r\n    \"location\":{\r\n        \"latitude\":\"26.020024\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/restaurant",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"restaurant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restaurants Location Empty",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"You must provide the latitude and longitude for the location\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"location\":{}\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/restaurant",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"restaurant"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get Restaurants Location Wrong lat",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 400\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"const jsonData = pm.response.json();\r",
											"pm.test(\"Message validation\", () => {\r",
											"  pm.expect(jsonData).to.be.an(\"object\");\r",
											"  pm.expect(jsonData.message).to.be.a(\"string\");\r",
											"  pm.expect(jsonData.message).to.equal(\"You must provide valid latitude and longitude\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"protocolProfileBehavior": {
								"disableBodyPruning": true
							},
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "Authorization",
										"value": "{{token}}",
										"type": "text"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n    \"category\":\"pizza\",\r\n    \"location\":{\r\n        \"latitude\":\"126.020024\",\r\n        \"longitude\":\"-80.116178\"\r\n    }\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "http://{{url}}:{{port}}/restaurant",
									"protocol": "http",
									"host": [
										"{{url}}"
									],
									"port": "{{port}}",
									"path": [
										"restaurant"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}